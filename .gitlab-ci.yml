image: python:3.12

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"

# https://pip.pypa.io/en/stable/topics/caching/
cache:
  key:
    files:
      # Cache is tied to the uv.lock, which is the lockfile for the dependencies,
      # hence when the dependencies change, a different cache is used.
      - uv.lock
  paths:
    - .cache/pip
    - .cache/uv

stages:
  - Code Quality
  - Testing

before_script:
  - python -m pip install --upgrade uv

  # Install dependencies (automatically creates venv)
  - uv sync

  # Prune the cache, optimised to be the most efficient for CI
  # This only saves dependencies built from source, so it might
  # not have a big effect, but storing the full cache is really
  # slow, which would make it even faster without the cache.
  - uv cache prune --ci


basedpyright:
  stage: Code Quality
  script:
    - uv run basedpyright . --gitlabcodequality basedpyright-report.json
  artifacts:
    reports:
      codequality: basedpyright-report.json

ruff-check:
  stage: Code Quality
  script:
    - uv run ruff check --output-format=full .
    # Need to run it a second time to generate the GitLab report, as it uses stdout.
    - uv run ruff check --output-format=gitlab . > ruff-check-report.json
  artifacts:
    reports:
      codequality: ruff-check-report.json

ruff-format:
  stage: Code Quality
  script:
    - uv run ruff format --diff .

pytest:
  stage: Testing
  script:
    - uv run pytest -v
