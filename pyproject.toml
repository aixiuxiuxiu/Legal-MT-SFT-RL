[project]
name = "vision-finetune"
version = "0.1.0"
description = "Fine-tuning Vision Language Models (VLMs)"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "accelerate>=1.3.0",
    "bitsandbytes>=0.45.2; platform_machine != 'aarch64'",
    "hf-transfer>=0.1.9",
    "peft>=0.14.0",
    "rich>=13.9.4",
    "simple-parsing>=0.1.7",
    "torch>=2.6.0",
    "torchvision>=0.21.0",
    "transformers>=4.49.0",
    "triton>=3.2.0; platform_machine != 'aarch64'",
    "trl>=0.15.2",
    "unsloth",
    "unsloth-zoo; platform_machine != 'aarch64'",
    "wandb>=0.19.6",
    "xformers>=0.0.29; platform_machine != 'aarch64'",
]

[project.optional-dependencies]
compile = [
    "triton==3.2.0; platform_machine == 'aarch64'",
    "xformers==0.0.29.post3; platform_machine == 'aarch64'",
    "unsloth-zoo; platform_machine == 'aarch64'",
    "bitsandbytes==0.45.2; platform_machine == 'aarch64'",
]


[dependency-groups]
dev = [
    "basedpyright>=1.27.0",
    "debugpy>=1.8.12",
    "pybind11>=2.13.6",
    "pytest>=8.3.4",
    "ruff>=0.9.6",
]

[tool.basedpyright]
typeCheckingMode = "standard"
reportPrivateImportUsage = false
reportMatchNotExhaustive = true
reportUnnecessaryComparison = true
# These need to be ignored separately, even though they are already in gitignore.
# Otherwise it tries to check all files in the virtual environment (.venv) or any
# of these generated directories.
exclude = [
  "**/__pycache__",
  ".ruff_cache/",
  ".cache/",
  ".venv/",
  "build",
  "log/",
  "unsloth_compiled_cache/",
]
# Automatically look in the virtual environment for packages
venv = ".venv"
venvPath = "."


[tool.pytest.ini_options]
testpaths = "test"

[tool.ruff.lint]
# Additionally include import sorting lints (and automatic formatting with --fix)
extend-select = ["I"]

[tool.uv]
no-build-isolation-package = ["triton", "xformers"]

[tool.uv.sources]
# Are you serious... This doesn't compile the extension.
# HOW CAN THIS BE SO BAD???
# Will hopefully be implemented when the PR is merged: https://github.com/bitsandbytes-foundation/bitsandbytes/pull/1512
bitsandbytes = { git = "https://github.com/bitsandbytes-foundation/bitsandbytes", tag = "0.45.2", marker =  "platform_machine == 'aarch64'" }
# TODO: For now the only solution I have, is to build bnb manually.
# bitsandbytes = { path = "build/bitsandbytes-0.45.2", marker =  "platform_machine == 'aarch64'" }
torch = [
  { index = "pytorch-cu126", marker = "platform_machine == 'aarch64'" },
]
torchvision = [
  { index = "pytorch-cu126", marker = "platform_machine == 'aarch64'" },
]
triton = { git = "https://github.com/triton-lang/triton", subdirectory = "python", branch = "release/3.2.x", marker = "platform_machine == 'aarch64'" }
# FIXME: Get rid of rev once unsloth is not botched anymore. (No idea what the issue is now)
unsloth = { git = "https://github.com/unslothai/unsloth.git" }
unsloth-zoo = { git = "https://github.com/unslothai/unsloth-zoo.git" }
transformers = { git = "https://github.com/huggingface/transformers.git" }
xformers = { git = "https://github.com/facebookresearch/xformers", tag = "v0.0.29.post3", marker = "platform_machine == 'aarch64'" }

[[tool.uv.index]]
name = "pytorch-cu126"
url = "https://download.pytorch.org/whl/cu126"
explicit = true

# This looks very unnecessary and noisy, but because these are built from source on aarch64,
# they are not installed by default, but uv still needs to know the build dependencies of them.
[[tool.uv.dependency-metadata]]
name = "triton"
version = "3.2.0"
requires-dist = ["setuptools", "pybind11"]

[[tool.uv.dependency-metadata]]
name = "xformers"
version = "0.0.29"
requires-dist = ["setuptools", "torch"]
